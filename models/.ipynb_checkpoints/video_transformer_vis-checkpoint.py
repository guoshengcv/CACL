import torch
import torch.nn as nn
from torch.nn import functional as F
import torchvision.models as models
from itertools import repeat
from torch._six import container_abcs
import math
import warnings
from functools import partial
import numpy as np


def drop_path(x, drop_prob: float = 0., training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).

    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.

    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


# From PyTorch internals
def _ntuple(n):
    def parse(x):
        if isinstance(x, container_abcs.Iterable):
            return x
        return tuple(repeat(x, n))
    return parse


to_1tuple = _ntuple(1)
to_2tuple = _ntuple(2)
to_3tuple = _ntuple(3)
to_4tuple = _ntuple(4)
to_ntuple = _ntuple


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


save_count = 0


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn_numpy = attn.cpu().detach().numpy()
        global save_count
        np.save(f"attn_{save_count}.npy", attn_numpy)
        save_count += 1
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x

class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Block(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x):
        x = x + self.drop_path(self.attn(self.norm1(x)))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class VideoEmbed(nn.Module):
    """ video frame to feature Embedding
    """
    def __init__(self, img_size=112, num_frames=32, in_chans=3, embed_dim=768):
        super().__init__()
        self.extract_feature_net = models.resnet50(pretrained=False)
        for name, param in self.extract_feature_net.named_parameters():
            param.requires_grad = False
        print("effect111")
        print("-----------load self supervised pretrain weight-----------------")
        # self_pretrain_weight = torch.load("/home/jovyan/workspace-xzh-cv/code/vfop_moco/moco_v1_200ep_pretrain.pth.tar")
        # self_pretrain_weight = torch.load("/home/jovyan/workspace-xzh-cv/code/moco/weights/mocov2_ucf101_ep200.pth.tar")
        self_pretrain_weight = torch.load("/home/jovyan/workspace-xzh-cv/code/moco/weights/mocov1_ucf101_ep200.pth.tar")
        self_pretrain_weight = self_pretrain_weight["state_dict"]
        adjusted_weights = dict()
        for name, params in self_pretrain_weight.items():
            # retain only encoder_q up to before the embedding layer
            if name.startswith('module.encoder_q') and not name.startswith('module.encoder_q.fc'):
                # # remove prefix
                # state_dict[k[len("module.encoder_q."):]] = state_dict[k]
                name = name.split('encoder_q.')[1]
                adjusted_weights[name] = params
#                 print('Pretrained weight name: [{}]'.format(name))

        self.extract_feature_net.fc = torch.nn.Identity()
        self.extract_feature_net.load_state_dict(adjusted_weights, strict=False)
        self.extract_feature_net.eval()
        self.num_frames = num_frames
        with torch.no_grad():
            o = self.extract_feature_net(torch.zeros(1, in_chans, img_size, img_size))
            assert len(o.shape) == 2
            backbone_embed_dim = o.shape[1]
        self.embed_dim = embed_dim
        print("video frame embed dim={}".format(self.embed_dim))
        self.embed_head = nn.Linear(backbone_embed_dim, self.embed_dim)
        for param in self.extract_feature_net.parameters():
            param.requires_grad = False

    def forward(self, x):
        self.extract_feature_net.eval()
        with torch.no_grad():
            n = x.shape[0]
            x = self.extract_feature_net(x)
        x = self.embed_head(x)
        x = x.reshape(n // self.num_frames, self.num_frames, -1)
        return x


class VideoTransformer(nn.Module):
    """ Video Transformer modified from vision transformer
    """
    def __init__(self, img_size=112, num_frames=32, in_chans=3, num_classes=80, embed_dim=768, depth=12,
                 num_heads=12, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop_rate=0., attn_drop_rate=0.,
                 drop_path_rate=0., hybrid_backbone=None, norm_layer=nn.LayerNorm):
        super().__init__()
        self.video_embed = VideoEmbed(img_size, num_frames, in_chans)
        self.num_features = self.embed_dim = self.video_embed.embed_dim

        self.cls_token = nn.Parameter(torch.zeros(1, 1, self.embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, num_frames + 1, self.embed_dim))
        embed_dim = self.embed_dim
        # self.pos_embed = nn.Parameter(torch.zeros(1, num_patches, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])
        self.norm = norm_layer(embed_dim)

        # NOTE as per official impl, we could have a pre-logits representation dense layer + tanh here
        # self.repr = nn.Linear(embed_dim, representation_size)
        # self.repr_act = nn.Tanh()

        # embed head
        self.embed_head = nn.Linear(self.embed_dim, 128)

        trunc_normal_(self.pos_embed, std=.02)
        trunc_normal_(self.cls_token, std=.02)
        # self.apply(self._init_weights)

    # def init_weights(self, pretrained):
    #     d = torch.load(pretrained)
        # reshape pos_embed pretrain weight
        # for k, v in d.items():
        #     if k == "pos_embed":
        #         x = v.transpose(1, 2)
        #         x = x[:, :, 1:].reshape(1, 768, 24, 24)
        #         up = torch.nn.UpsamplingBilinear2d(size=(32, 32))
        #         x = up(x)
        #         x = x.reshape(1, 768, -1).transpose(1, 2)
        #         cls_w = torch.zeros(1, 1025, 768)
        #         cls_w[:, 1:, :] = x
        # d["pos_embed"] = cls_w
        # self.load_state_dict(d, strict=False)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {'pos_embed', 'cls_token'}

    def get_classifier(self):
        return self.head

    def reset_classifier(self, num_classes, global_pool=''):
        self.num_classes = num_classes
        self.head = nn.Linear(self.embed_dim, num_classes) if num_classes > 0 else nn.Identity()

    def forward(self, x):
        # num_video_per_instance = 2
        B, num_video_per_instance, C, num_frames, H, W = x.shape
        # x = x[:, 0, :, :, :, :] # B, C, num_frames, H, W
        x = x.transpose(3, 2)

        x = x.reshape(-1, C, H, W)
        x = self.video_embed(x)

        cls_tokens = self.cls_token.expand(B, -1, -1)  # stole cls_tokens impl from Phil Wang, thanks
        x = torch.cat((cls_tokens, x), dim=1)
        x = x + self.pos_embed
        x = self.pos_drop(x)

        for i, blk in enumerate(self.blocks):
            x = blk(x)

        cls_feat = self.norm(x)
        cls_feat = cls_feat[:, 0]

        feat = self.embed_head(cls_feat)

        return feat
